name: Code Quality Checks

on:
  pull_request:
    branches: [main, dev]

permissions:
  checks: write
  contents: read

jobs:
  quality-checks:
    runs-on: ubuntu-22.04

    steps:
      # Checkout repository code
      - name: Checkout code
        uses: actions/checkout@v4

      # Setup Node.js environment with Yarn
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'yarn' # Enable Yarn caching

      # Cache dependencies to speed up workflows
      - name: Cache dependencies
        uses: actions/cache@v3
        with:
          path: |
            .yarn/cache
            .next/cache
          key: ${{ runner.os }}-yarn-${{ hashFiles('yarn.lock') }}

      # Install project dependencies
      - name: Install dependencies
        run: yarn install --frozen-lockfile

      # Add ESLint results as PR comments
      - name: ESLint Annotations
        uses: reviewdog/action-eslint@master
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          reporter: github-pr-review
        
      # Run TypeScript type checking
      - name: TypeScript Type Check
        run: yarn type-check

      # Run ESLint validation
      - name: ESLint Validation
        run: yarn lint:report

      - name: Publish lint report
        uses: mikepenz/action-junit-report@v3
        with:
          report_paths: reports/eslint.xml
          check_name: ESLint Report

      # Run test
      - name: Run Tests
        run: yarn jest

      # publish report
      - name: Publish test report
        uses: mikepenz/action-junit-report@v3
        with:
          report_paths: reports/junit.xml
          check_name: Test Report

      # - name: Publish custom report
      #   uses: EnricoMi/publish-unit-test-result-action@v1
      #   with:
      #     files: reports/junit.xml
      #     check_name: Text Report 2
      #     fail_on: nothing

      - name: create text file
        run: |
          echo "file1:1:This is a sample report" > reports/sample.txt
          echo "file1:2:You can customize this report as needed." >> reports/sample.txt

      - name: Create check run with custom report and annotations
        uses: actions/github-script@v6
        with:
          script: |
            const fs = require('fs');
            const path = require('path');

            // Read the custom report file content
            const reportContent = fs.readFileSync('reports/sample.txt', 'utf8');

            // Parse the report content into annotations (assuming each line represents an error or warning)
            const lines = reportContent.split('\n').map(line => line.trim()).filter(line => line.length > 0);
            const annotations = lines.map((line, index) => {
              // Assume each line format is "file_path:line_number:message"
              const [filePath, lineNumber, message] = line.split(':');
              return {
                path: filePath,
                start_line: parseInt(lineNumber),
                end_line: parseInt(lineNumber),
                annotation_level: "warning", // Use "failure" if needed
                message: message,
              };
            });

            // Create a check run with GitHub Checks API
            await github.rest.checks.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              name: "Custom Lint Report",
              head_sha: context.sha,
              status: "completed",
              conclusion: "success", // Adjust to "failure" if needed
              output: {
                title: "Custom Lint Report",
                summary: "Summary of the lint results.",
                text: "### Detailed Report\n\n```\n" + reportContent + "\n```",
                annotations: annotations, // Add detailed line-by-line annotations
              },
            });

      # Optional: SonarCloud integration (uncomment if needed)
      # - name: SonarCloud Scan
      #   uses: sonarsource/sonarcloud-github-action@master
      #   env:
      #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      #     SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}